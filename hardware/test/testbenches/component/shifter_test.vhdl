--! @file
--! @brief shifter testbench.
--! @details File generated by the quanta testbench generator utility.
--! @details Refer to gitlab.com/tan90/quanta for details.


--------------------------------------
-- Start of tgen generated code block.

--! Use standart library.
library ieee;
--! Use logic elements.
use ieee.std_logic_1164.all;
--! Use numeric elements for generic type and vector construction.
use ieee.numeric_std.all;
--! Use the function code definitions.
use work.shifter_functions;
--! Use the status indices definitions (same as used by ALU).
use work.alu_status;

--  End of tgen generated code block.
--------------------------------------

--! Use text IO for file manipulation.
use std.textio.all;
--! Use std_logic text IO for interfacing logic elements and files. 
use ieee.std_logic_textio.all;

--! @brief Empty top level entity for testbench.
entity shifter_test is
end entity shifter_test;

--! @brief Default shifter test behavior.
--! @details Tests the shifter component given the input csv file.
--! @details Outputs test results to the output file.
architecture behavioral of shifter_test is

--------------------------------------
-- Start of tgen generated code block.

signal a_in_s:std_logic_vector(32 - 1 downto 0);--! Shifter data input A.
signal carry_in_s:std_logic;--! Shifter carry in.
signal function_in_s:std_logic_vector( 3 downto 0);--! Shifter function selector.
signal c_out_s:std_logic_vector(32 - 1 downto 0);--! Shifter result output C.
signal status_out_s:std_logic_vector( 4 downto 0);--! Shifter status output.

--  End of tgen generated code block.
--------------------------------------
    
    file file_in  : text; --! Input file.
    file file_out : text; --! Output file.

    constant PATH_FILE_IN  : string := "../test/in/component/shifter_test.csv"; --! Input file path.
    constant PATH_FILE_OUT : string := "../test/out/component_shifter_test.csv"; --! Output file path (prefixed since VHDL can't create folders).

    constant SET_INPUT_DELAY    : time := 2 ps; --! Time between each input change.
    constant CHECK_OUTPUT_DELAY : time := 1 ps; --! Time to wait for output check after the input is set.
begin
    --! @brief Unit under test.
    uut: entity work.shifter(behavioral)
    generic map
    (

--------------------------------------
-- Start of tgen generated code block.

data_width_g => 32

--  End of tgen generated code block.
--------------------------------------

    )
    port map
    (

--------------------------------------
-- Start of tgen generated code block.

a_in=>a_in_s,
carry_in=>carry_in_s,
function_in=>function_in_s,
c_out=>c_out_s,
status_out=>status_out_s

--  End of tgen generated code block.
--------------------------------------

    );

    --! @brief Test process.
    --! @details Reads inputs from file, asserts outputs and writes test result to file.
    test: process
        variable vector_v     : line; -- Holds the current line from the input file.
        variable separator_v  : character; -- Holds the input file separator_v.
        
        variable stream_out_v : line; --! Holds the string being built to write on output.

--------------------------------------
-- Start of tgen generated code block.

variable a_in_v:std_logic_vector(32 - 1 downto 0); --! Shifter data input A.
variable carry_in_v:std_logic; --! Shifter carry in.
variable function_in_v:std_logic_vector( 3 downto 0); --! Shifter function selector.
variable c_out_v:std_logic_vector(32 - 1 downto 0); --! Shifter result output C.
variable status_out_v:std_logic_vector( 4 downto 0); --! Shifter status output.

--  End of tgen generated code block.
--------------------------------------

        variable test_count_v   : integer := 0; -- Holds the number of tests executed.
        variable passed_count_v : integer := 0; -- Holdes the number of tests passed.
    begin
        file_open(file_in , PATH_FILE_IN , read_mode );
        file_open(file_out, PATH_FILE_OUT, write_mode);

        -- Write the header of the output file.
        write(stream_out_v, string'("-- Simulation result for 'shifter_test' with input file '" & PATH_FILE_IN & "'."));
        writeline(file_out, stream_out_v);
        
        write(stream_out_v, string'("-- Simulation results in csv format (commented with --):"));
        writeline(file_out, stream_out_v);

        write(stream_out_v, string'(""));
        writeline(file_out, stream_out_v);        

        -- Read the first line of input file, and write it to output, as it contains column names.
        readline (file_in , vector_v);
        writeline(file_out, vector_v);

        -- Run all test cases from input file.
        while not endfile(file_in) loop
            readline(file_in, vector_v);
            
            -- Read test case inputs and expected output.
            
--------------------------------------
-- Start of tgen generated code block.

read(vector_v, a_in_v);
read(vector_v, separator_v); -- Read the comma to the separator variable to discard it.
read(vector_v, carry_in_v);
read(vector_v, separator_v); -- Read the comma to the separator variable to discard it.
read(vector_v, function_in_v);
read(vector_v, separator_v); -- Read the comma to the separator variable to discard it.
read(vector_v, c_out_v);
read(vector_v, separator_v); -- Read the comma to the separator variable to discard it.
read(vector_v, status_out_v);

--  End of tgen generated code block.
--------------------------------------

            -- Set UUT input signals to test case inputs.

--------------------------------------
-- Start of tgen generated code block.

a_in_s<=a_in_v;
carry_in_s<=carry_in_v;
function_in_s<=function_in_v;

--  End of tgen generated code block.
--------------------------------------

            -- Wait for the signals to propagate.
            wait for CHECK_OUTPUT_DELAY;
            
            -- Write test case signals to output file.

--------------------------------------
-- Start of tgen generated code block.

write(stream_out_v, a_in_s);
write(stream_out_v, string'(","));
write(stream_out_v, carry_in_s);
write(stream_out_v, string'(","));
write(stream_out_v, function_in_s);
write(stream_out_v, string'(","));
write(stream_out_v, c_out_s);
write(stream_out_v, string'(","));
write(stream_out_v, status_out_s);

--  End of tgen generated code block.
--------------------------------------

            -- Check actual outputs against the expected ones.
            if c_out_s = c_out_v and status_out_s = status_out_v then
                -- Report a passed test to output file.
                write(stream_out_v, string'(" -- Passed."));

                passed_count_v := passed_count_v + 1;
            else
                -- Report a failed test to output file.
                write(stream_out_v, string'(" -- Failed."));

--------------------------------------
-- Start of tgen generated code block.

write(stream_out_v, string'(" Expected c_out: "));
write(stream_out_v, c_out_v );
write(stream_out_v, string'("."));
write(stream_out_v, string'(" Expected status_out: "));
write(stream_out_v, status_out_v );
write(stream_out_v, string'("."));

--  End of tgen generated code block.
--------------------------------------

                -- Report a failed test to simulation console.
                report "Test " & integer'image(test_count_v) & " failed. Refer to output file: " & PATH_FILE_OUT & ".";
            end if;

            writeline(file_out, stream_out_v);
            test_count_v := test_count_v + 1;

            -- Wait for time left until next inputs are set.
            wait for SET_INPUT_DELAY - CHECK_OUTPUT_DELAY;
        end loop;
        
        -- Report complete test results to output file.
        write(stream_out_v, string'(""));
        writeline(file_out, stream_out_v);

        -- Check the number of passed tests against the total number of tests.
        if test_count_v = passed_count_v then
            -- Report a passed test to output file.
            write(stream_out_v, string'("-- All tests passed for 'shifter'."));
            writeline(file_out, stream_out_v);
        else
            -- Report a failed test to output file.
            write(stream_out_v, string'("-- Tests failed for 'shifter_test'."));
            writeline(file_out, stream_out_v);

            write(stream_out_v, string'("-- " & integer'image(passed_count_v) & "/" & integer'image(test_count_v) & " tests passed."));
            writeline(file_out, stream_out_v);

            report "Tests failed. " & integer'image(passed_count_v) & "/" & integer'image(test_count_v) & " tests passed.";
        end if;
        
        file_close(file_in );
        file_close(file_out);
        wait;
    end process test;    
end architecture behavioral;
