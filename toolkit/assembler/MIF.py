## @file
## @brief Memory Initialization File Handling.

import math

from Util import to_fixed_length_bin

## @brief Represents a Memory Initialization File.
class MIF:
    header  = '-- File generated by the quanta assembler.\n'
    header += '-- Refer to gitlab.com/tan90/quanta for details.\n'

    def __init__(self, width, depth, address_radix, data_radix, data):
        ## @brief The number of bits per data word.
        self.width = width
        ## @brief The number of data words.
        self.depth = depth
        ## @brief The address width for the specified radix calculeated by the world count.
        self.address_width = int(math.log(depth, 2))

        ## @brief The address radix to be used when exporting to a file.
        ## @details At the moment only binary radix is supported, so this is ignored.
        self.address_radix = address_radix
        ## @brief The address radix to be used when exporting to a file.
        ## @details At the moment only binary radix is supported, so this is ignored.
        self.data_radix = data_radix

        ## @brief The ordered data for each address
        self.data = data

    ## @brief Formats the file data as a string.
    ## @return The data as a string composed of address:data pairs.
    def format_data(self):
        data_str = ''
        line = 0

        for word in self.data:
            # Generate an address:data pair for the current word.
            data_line = '    {}:{};\n'
            address = to_fixed_length_bin(line, self.address_width)
            
            data_str += data_line.format(address, word)
            
            line += 1
            if line > self.depth:
                print('Could not generate Memory Initialization File.')
                print('The number of words exceeded the memory depth.')

        if line == self.depth - 1:
            data_line = '    {}:{};\n'
            last_address = to_fixed_length_bin(self.depth - 1, self.address_width)
            default_value = to_fixed_length_bin(0, self.width)

            data_str += data_line.format(last_address, default_value)
        elif line < self.depth - 1: 
            #Initialize any unused addresses to a default value.
            data_line = '    [{}..{}]:{};\n'
            address = to_fixed_length_bin(line, self.address_width)
            last_address = to_fixed_length_bin(self.depth - 1, self.address_width)
            default_value = to_fixed_length_bin(0, self.width)
            
            data_str += data_line.format(address, last_address, default_value)

        return data_str

    ## @brief Turns the class into an acutal MIF file.
    ## @return The MIF file as a string
    def as_file(self):
        data  = self.header

        data += 'WIDTH={};\n'.format(str(self.width))
        data += 'DEPTH={};\n'.format(str(self.depth))

        data += 'ADDRESS_RADIX={};\n'.format(self.address_radix)
        data += 'DATA_RADIX={};\n'.format(self.data_radix)
        data += 'CONTENT BEGIN\n'

        data += self.format_data()

        data += 'END;\n'

        return data
